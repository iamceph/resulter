plugins {
    id 'java'
    id 'java-library'
    id 'idea'
    id 'signing'
    id 'maven-publish'
    id 'io.freefair.lombok' version '6.1.0'

    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

allprojects {
    group 'com.iamceph.resulter'
    version '1.0.1'

    repositories {
        mavenCentral()
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = MAVEN_CENTRAL_USERNAME
            password = MAVEN_CENTRAL_PASSWORD

            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    sign publishing.publications
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'io.freefair.lombok'

    dependencies {
        compileOnly group: 'org.jetbrains', name: 'annotations', version: JETBRAINS_ANNOTATIONS_VERSION
    }

    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUNIT_VERSION
    }

    test {
        useJUnitPlatform()
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            release(MavenPublication) {
                group = project.group
                version project.version

                it.artifact(project.tasks.sourcesJar)
                it.artifact(project.tasks.javadocJar)
                it.artifact(project.tasks.jar)

                it.pom.withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")
                    project.configurations.compileOnly.dependencies.each {
                        if (!(it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'provided')
                        }
                    }
                    if (!project.tasks.findByName("shadowJar")) {
                        project.configurations.api.dependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }

                // Mostly self-explanatory metadata
                pom {
                    name = "Resulter"
                    description = 'Tired of throwing exceptions or returning nonsense? Well, Resulter will save you!'
                    url = 'https://github.com/iamceph/resulter'
                    licenses {
                        license {
                            name = 'GPL-3.0 License'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                        }
                    }
                    developers {
                        developer {
                            id = 'iamceph'
                            name = 'Frantisek Novosad'
                            email = 'frantisek@nvsd.dev'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/iamceph/resulter.git'
                        developerConnection = 'scm:git:ssh://github.com/iamceph/resulter.git'
                        url = 'https://github.com/iamceph/resulter/tree/main'
                    }
                }
            }
        }
    }
}